// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`rendering compiler optimizing basic rendering changing root component 1`] = `
<div>
  <span>
    first
  </span>
</div>
`;

exports[`rendering compiler optimizing basic rendering changing root component 2`] = `
<span>
  Empty
</span>
`;

exports[`rendering compiler optimizing basic rendering changing root component 3`] = `
<div>
  <span>
    Added a new item first item
  </span>
</div>
`;

exports[`rendering compiler optimizing basic rendering using DOM types directly 1`] = `
<div>
  <span>
    first
  </span>
  <span>
    second
  </span>
  <span>
    third
  </span>
</div>
`;

exports[`rendering compiler optimizing basic rendering using DOM types directly 2`] = `
<div>
  <span>
    first
  </span>
  <span>
    changed the second item
  </span>
  <span>
    third
  </span>
</div>
`;

exports[`rendering compiler optimizing basic rendering using DOM types directly 3`] = `
<div>
  <span>
    first
  </span>
  <span>
    changed the second item
  </span>
  <span>
    third
  </span>
  <span>
    Added a fourth item
  </span>
</div>
`;

exports[`rendering compiler optimizing basic rendering using functions in compNames map 1`] = `
<div>
  <span>
    first
  </span>
  <span>
    second
  </span>
  <span>
    third
  </span>
</div>
`;

exports[`rendering compiler optimizing basic rendering using functions in compNames map 2`] = `
<div>
  <span>
    first
  </span>
  <span>
    changed the second item
  </span>
  <span>
    third
  </span>
</div>
`;

exports[`rendering compiler optimizing basic rendering using functions in compNames map 3`] = `
<div>
  <span>
    first
  </span>
  <span>
    changed the second item
  </span>
  <span>
    third
  </span>
  <span>
    Added a fourth item
  </span>
</div>
`;

exports[`rendering compiler optimizing copy props to observer 1`] = `
<div
  className="visible"
  id="test"
/>
`;

exports[`rendering compiler optimizing copy props to observer 2`] = `
<div
  className="visible"
  id="changed"
/>
`;

exports[`rendering compiler optimizing multiple children support 1`] = `
<div>
  <span
    onClick={[Function]}
  >
    - first
  </span>
  <span
    onClick={[Function]}
  >
    - second
  </span>
  <span
    onClick={[Function]}
  >
    - third
  </span>
  <span>
    items not clicked:
    3
  </span>
</div>
`;

exports[`rendering compiler optimizing multiple children support 2`] = `
<div>
  <span
    onClick={[Function]}
  >
    + first
  </span>
  <span
    onClick={[Function]}
  >
    - second
  </span>
  <span
    onClick={[Function]}
  >
    - third
  </span>
  <span>
    items not clicked:
    2
  </span>
</div>
`;

exports[`rendering compiler optimizing on render start/end hooks should invoke on first render and after change 1`] = `
<div
  className="initial"
>
  Empty
</div>
`;

exports[`rendering compiler optimizing on render start/end hooks should invoke on first render and after change 2`] = `
<div
  className="changed"
>
  Empty
</div>
`;

exports[`rendering compiler optimizing on render start/end hooks should not pass markRender functions to component 1`] = `
<div
  somePropKey="somePropValue"
>
  Empty
</div>
`;

exports[`rendering compiler optimizing refs forwarding should work 1`] = `
<input
  value="test"
/>
`;

exports[`rendering compiler simple basic rendering changing root component 1`] = `
<div>
  <span>
    first
  </span>
</div>
`;

exports[`rendering compiler simple basic rendering changing root component 2`] = `
<span>
  Empty
</span>
`;

exports[`rendering compiler simple basic rendering changing root component 3`] = `
<div>
  <span>
    Added a new item first item
  </span>
</div>
`;

exports[`rendering compiler simple basic rendering using DOM types directly 1`] = `
<div>
  <span>
    first
  </span>
  <span>
    second
  </span>
  <span>
    third
  </span>
</div>
`;

exports[`rendering compiler simple basic rendering using DOM types directly 2`] = `
<div>
  <span>
    first
  </span>
  <span>
    changed the second item
  </span>
  <span>
    third
  </span>
</div>
`;

exports[`rendering compiler simple basic rendering using DOM types directly 3`] = `
<div>
  <span>
    first
  </span>
  <span>
    changed the second item
  </span>
  <span>
    third
  </span>
  <span>
    Added a fourth item
  </span>
</div>
`;

exports[`rendering compiler simple basic rendering using functions in compNames map 1`] = `
<div>
  <span>
    first
  </span>
  <span>
    second
  </span>
  <span>
    third
  </span>
</div>
`;

exports[`rendering compiler simple basic rendering using functions in compNames map 2`] = `
<div>
  <span>
    first
  </span>
  <span>
    changed the second item
  </span>
  <span>
    third
  </span>
</div>
`;

exports[`rendering compiler simple basic rendering using functions in compNames map 3`] = `
<div>
  <span>
    first
  </span>
  <span>
    changed the second item
  </span>
  <span>
    third
  </span>
  <span>
    Added a fourth item
  </span>
</div>
`;

exports[`rendering compiler simple copy props to observer 1`] = `
<div
  className="visible"
  id="test"
/>
`;

exports[`rendering compiler simple copy props to observer 2`] = `
<div
  className="visible"
  id="changed"
/>
`;

exports[`rendering compiler simple multiple children support 1`] = `
<div>
  <span
    onClick={[Function]}
  >
    - first
  </span>
  <span
    onClick={[Function]}
  >
    - second
  </span>
  <span
    onClick={[Function]}
  >
    - third
  </span>
  <span>
    items not clicked:
    3
  </span>
</div>
`;

exports[`rendering compiler simple multiple children support 2`] = `
<div>
  <span
    onClick={[Function]}
  >
    + first
  </span>
  <span
    onClick={[Function]}
  >
    - second
  </span>
  <span
    onClick={[Function]}
  >
    - third
  </span>
  <span>
    items not clicked:
    2
  </span>
</div>
`;

exports[`rendering compiler simple on render start/end hooks should invoke on first render and after change 1`] = `
<div
  className="initial"
>
  Empty
</div>
`;

exports[`rendering compiler simple on render start/end hooks should invoke on first render and after change 2`] = `
<div
  className="changed"
>
  Empty
</div>
`;

exports[`rendering compiler simple on render start/end hooks should not pass markRender functions to component 1`] = `
<div
  somePropKey="somePropValue"
>
  Empty
</div>
`;

exports[`rendering compiler simple refs forwarding should work 1`] = `
<input
  value="test"
/>
`;
